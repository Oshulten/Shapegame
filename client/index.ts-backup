import { Shape } from "./modules/shape.js";
import { Camera } from "./modules/camera.js";
import { Layer } from "./modules/layer.js";
import { math } from "./modules/math.js";
import { Color } from "./modules/color.js";
import { World, type WorldObject } from "./modules/world.js";
import { DynamicAnimation } from "./modules/animation.js";
import { ClientDatabase } from "./modules/client-database.js";
import { Toolbar } from "./components/tool-bar/tool-bar.js";
import { FloatingWindow } from "./components/floating-window/floating-window.js";
import { ToggleButton } from "./components/toggle-button/toggle-button.js";
import { DynamicTable } from "./components/dynamic-table/dynamic-table.js";
import { CommandPrompt } from "./components/command-prompt/command-prompt.js";

const defaultSettings = {
    attemptToLoadWorld: "city-world2.json",
};

let worldObjectsProxy = undefined;
let worldNames = [];
const databaseLabel = "worldDatabase";

(async () => {
    try {
        //Get canvas element. If none is found, do not continue script 
        const canvas = document.querySelector("canvas#world-canvas") as HTMLCanvasElement;
        if (!canvas) throw new ReferenceError("No canvas element is present in the document.");
        canvas.classList.add("fullscreen");
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
        const context = canvas.getContext("2d");
        if (!context) throw new Error("A rendering context could not be extracted from the canvas element");

        let world = new World(context, "$default");

        // //Initializes static World
        // await World.initializeDatabase(databaseLabel);

        // // console.log(World.worldObjects);
        // // Attempt to load a default world from server
        // // If failed, create an empty world instead
        // // world = await World.getWorld(context, "city-world33.json");
        // let world = new World(context, "$default");
        // // world = new World(context, "$testLayerSorting");
        // world.start();

        // Attempt to hook up to UI elements
        // Add functionality if they are found
        // const toolbar = document.querySelector("tool-bar") as Toolbar;
        // const saveWorldBtn = toolbar.querySelector("#toolbar-save-world") as HTMLButtonElement;
        // const openWorldBtn = toolbar.querySelector("#toolbar-open-world") as HTMLButtonElement;
        // const openDemosBtn = toolbar.querySelector("#toolbar-open-demos") as HTMLButtonElement;
        // const layersBtn = toolbar.querySelector("#toolbar-layers") as HTMLButtonElement;
        // const prompt = document.querySelector("command-prompt") as CommandPrompt;
        // const layerWindow = document.querySelector("#layer-window") as FloatingWindow;
        // const openWorldWindow = document.querySelector("#open-world-window") as FloatingWindow;
        // const openDemosWindow = document.querySelector("#open-demos-window") as FloatingWindow;
        // const layerTable = document.querySelector("#layer-table") as DynamicTable;
        // const worldTable = document.querySelector("#open-world-table") as DynamicTable;
        // const demosTable = document.querySelector("#demos-table") as DynamicTable;
        // const runPhysicsToggle = document.querySelector("#run-toggle") as ToggleButton;
        // const setStaticToggle = document.querySelector("#set-static") as ToggleButton;

        // //UI functionality
        // if (toolbar) {
        //     if (toolbar) toolbar.connectWorld(world);

        //     //Save world
        //     if (saveWorldBtn) {
        //         saveWorldBtn.addEventListener("click", (event) => {
        //             if (world && toolbar.worldName.value.length !== 0) {
        //                 World.saveWorld(world, toolbar.worldName.value + ".json");
        //             } else {
        //                 window.alert("A world name is needed.");
        //             }
        //         });
        //     }
        //     //Open world
        //     if (openWorldBtn) {
        //         openWorldBtn.addEventListener("click", (event) => {
        //             if (openWorldWindow.toggle()) {
        //                 openWorldBtn.classList.add("active");
        //             } else {
        //                 openWorldBtn.classList.remove("active");
        //             }
        //             //Make sure layers button match window visibility state
        //             openWorldWindow.addEventListener("hiddenChanged", () => {
        //                 if (!openWorldWindow.hidden) openWorldBtn.classList.add("active");
        //                 else openWorldBtn.classList.remove("active");
        //             });
        //         });
        //     }
        //     //Layers
        //     if (layersBtn) {
        //         layersBtn.addEventListener("click", (event) => {
        //             if (layerWindow.toggle()) layersBtn.classList.add("active");
        //             else layersBtn.classList.remove("active");
        //         });
        //         //Make sure layers button match window visibility state
        //         layerWindow.addEventListener("hiddenChanged", () => {
        //             if (!layerWindow.hidden) layersBtn.classList.add("active");
        //             else layersBtn.classList.remove("active");
        //         });
        //     }
        //     //Demos
        //     if (openDemosBtn) {
        //         openDemosBtn.addEventListener("click", (event) => {
        //             if (openDemosWindow.toggle()) {
        //                 openDemosBtn.classList.add("active");
        //             } else {
        //                 openDemosBtn.classList.remove("active");
        //             }
        //             //Make sure layers button match window visibility state
        //             openDemosWindow.addEventListener("hiddenChanged", () => {
        //                 if (!openDemosWindow.hidden) openDemosBtn.classList.add("active");
        //                 else openDemosBtn.classList.remove("active");
        //             });
        //         });
        //     }
        // } else console.error("No toolbar element is present in the document.");

        // //Prompt
        // if (prompt) {
        //     prompt.addParseCallback((text: string) => {
        //         if (!world.workshop.tryCommand(text)) {
        //             const words = text.split(" ");
        //             switch (words[0]) {
        //                 case "layers":
        //                     layerWindow.toggle();
        //                     break;
        //                 case "world":
        //                     console.log(world);
        //                     break;
        //                 case "clear":
        //                     world.clear();
        //                     break;
        //                 case "snap":
        //                     world.workshop.grid.snap = !world.workshop.grid.snap;
        //                     break;
        //                 case "loadworld":
        //                     if (words[1]) {
        //                         try {
        //                             const newWorld = new World(context, words[1]);
        //                             world = newWorld;
        //                             world.start();
        //                         } catch (error) {
        //                             console.error(error);
        //                         }
        //                     } else {
        //                         console.log("A world name is needed.");
        //                     }
        //                 default:
        //                     return;
        //             }
        //         }
        //     });
        //     //Hi-jack backquote key to focus on the prompt whenever
        //     window.addEventListener("keydown", (event: KeyboardEvent) => {
        //         if (event.code === "Backquote") {
        //             event.preventDefault();
        //             prompt.focus();
        //         }
        //     });
        //     prompt.focus();
        // }
        // if (runPhysicsToggle) {
        //     runPhysicsToggle.addEventListener("change", (event: Event) => {
        //         const customEvent = event as CustomEvent;
        //         world.runPhysics(customEvent.detail.on);
        //     });
        //     world.runPhysics(runPhysicsToggle.atts.on);
        // }
        // if (setStaticToggle) {
        //     setStaticToggle.addEventListener("change", (event: Event) => {
        //         const customEvent = event as CustomEvent;
        //         world.workshop.createStaticShapes = !customEvent.detail.on;
        //     });
        //     world.workshop.createStaticShapes = !setStaticToggle.atts.on;
        // }

        // if (worldTable) {
        //     worldTable.connectArray(World.worldObjects, {
        //         keys: ["label"],
        //         prettyKeys: ["World Name"],
        //         activeObject: undefined,
        //         callbacks: {
        //             activeObject: async (object: WorldObject) => {
        //                 if (object.filename) {
        //                     world = await World.getWorld(context, object.filename);
        //                     if (toolbar) {
        //                         toolbar.connectWorld(world);
        //                     }
        //                     world.start();
        //                 }
        //             },
        //         },
        //     });
        //     // World.notifyWorldObjectsChangedCallbacks.push((worldObjects) => {
        //     //     worldTable.construct();
        //     // });
        // }

        // if (layerTable) {
        //     function constructLayerTable(world: World) {
        //         layerTable.connectArray(world.layers, {
        //             keys: ["runPhysics", "space", "depth"],
        //             prettyKeys: ["Physics", "Type", "Depth"],
        //             activeObject: world.layers[0],
        //             callbacks: {
        //                 activeObject: (object: Layer) => {
        //                     world.setActiveLayer(object);
        //                 },
        //             },
        //         });
        //     }
        //     World.notifyLayersChangedCallbacks.push((world: World) => {
        //         constructLayerTable(world);
        //     });
        //     constructLayerTable(world);
        // }

        // if (demosTable) {
        //     demosTable.connectArray(world.demoMethods, {
        //         keys: ["label"],
        //         prettyKeys: ["Demo Name"],
        //         activeObject: undefined,
        //         callbacks: {
        //             activeObject: async (object: WorldObject) => {
        //                 world = new World(context, object.label);
        //                 if (toolbar) {
        //                     toolbar.connectWorld(world);
        //                 }
        //                 world.start();
        //             },
        //         },
        //     });
        // }

        // async function refreshWorldNames() {
        //     if (worldTable) {
        //         await World.getWorldNames();
        //         worldTable.refresh();
        //     }
        // }

        // async function refreshLayers() {
        //     if (layerTable) {
        //         layerTable.refresh();
        //     }
        // }

        // console.log(world.layers);
    } catch (error) {
        console.log(error);
    }
})();
